# serverless.yml

service: my-express-application

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-local-authorizers-plugin

custom:
  tableName: "users-table-${self:provider.stage}"
  dynamodb:
    stages:
      - dev
  serverless-offline:
    noPrependStageInUrl: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["CognitoUserPool", "Arn"] }
  environment:
    USERS_TABLE: ${self:custom.tableName}
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }

functions:
  login:
    handler: login.handler
    events:
      - http:
          path: /login
          method: post


  app:
    handler: index.handler
    events:
      - http: 
          path: /
          method: ANY
          integration: lambda
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: 
              Fn::GetAtt: 
                - CognitoUserPool 
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  getUser:
    handler: index.handler
    events:
      - http: "GET /users/{proxy+}"
  createUser:
    handler: index.handler
    events:
      - http: "POST /users"

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH

